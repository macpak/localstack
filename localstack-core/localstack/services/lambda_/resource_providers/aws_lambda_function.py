# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class LambdaFunctionProperties(TypedDict):
    Code: Optional[Code]
    Role: Optional[str]
    Architectures: Optional[list[str]]
    Arn: Optional[str]
    CodeSigningConfigArn: Optional[str]
    DeadLetterConfig: Optional[DeadLetterConfig]
    Description: Optional[str]
    Environment: Optional[Environment]
    EphemeralStorage: Optional[EphemeralStorage]
    FileSystemConfigs: Optional[list[FileSystemConfig]]
    FunctionName: Optional[str]
    Handler: Optional[str]
    ImageConfig: Optional[ImageConfig]
    KmsKeyArn: Optional[str]
    Layers: Optional[list[str]]
    LoggingConfig: Optional[LoggingConfig]
    MemorySize: Optional[int]
    PackageType: Optional[str]
    ReservedConcurrentExecutions: Optional[int]
    Runtime: Optional[str]
    RuntimeManagementConfig: Optional[RuntimeManagementConfig]
    SnapStart: Optional[SnapStart]
    SnapStartResponse: Optional[SnapStartResponse]
    Tags: Optional[list[Tag]]
    Timeout: Optional[int]
    TracingConfig: Optional[TracingConfig]
    VpcConfig: Optional[VpcConfig]



class TracingConfig(TypedDict):
    Mode: Optional[str]



class VpcConfig(TypedDict):
    Ipv6AllowedForDualStack: Optional[bool]
    SecurityGroupIds: Optional[list[str]]
    SubnetIds: Optional[list[str]]



class RuntimeManagementConfig(TypedDict):
    UpdateRuntimeOn: Optional[str]
    RuntimeVersionArn: Optional[str]



class SnapStart(TypedDict):
    ApplyOn: Optional[str]



class FileSystemConfig(TypedDict):
    Arn: Optional[str]
    LocalMountPath: Optional[str]



class Tag(TypedDict):
    Key: Optional[str]
    Value: Optional[str]



class ImageConfig(TypedDict):
    Command: Optional[list[str]]
    EntryPoint: Optional[list[str]]
    WorkingDirectory: Optional[str]



class DeadLetterConfig(TypedDict):
    TargetArn: Optional[str]



class SnapStartResponse(TypedDict):
    ApplyOn: Optional[str]
    OptimizationStatus: Optional[str]



class Code(TypedDict):
    ImageUri: Optional[str]
    S3Bucket: Optional[str]
    S3Key: Optional[str]
    S3ObjectVersion: Optional[str]
    ZipFile: Optional[str]



class LoggingConfig(TypedDict):
    ApplicationLogLevel: Optional[str]
    LogFormat: Optional[str]
    LogGroup: Optional[str]
    SystemLogLevel: Optional[str]



class Environment(TypedDict):
    Variables: Optional[dict]



class EphemeralStorage(TypedDict):
    Size: Optional[int]



REPEATED_INVOCATION = "repeated_invocation"

class LambdaFunctionProvider(ResourceProvider[LambdaFunctionProperties]):

    TYPE = "AWS::Lambda::Function"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[LambdaFunctionProperties],
    ) -> ProgressEvent[LambdaFunctionProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/FunctionName

        Required properties:
          - Code
          - Role

        Create-only properties:
          - /properties/FunctionName

        Read-only properties:
          - /properties/SnapStartResponse
          - /properties/SnapStartResponse/ApplyOn
          - /properties/SnapStartResponse/OptimizationStatus
          - /properties/Arn

        IAM permissions required:
          - lambda:CreateFunction
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:Encrypt
          - kms:GenerateDataKey
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetLayerVersion
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:TagResource
          - lambda:GetPolicy
          - lambda:AddPermission
          - lambda:RemovePermission
          - lambda:GetResourcePolicy
          - lambda:PutResourcePolicy

        """
        model = request.desired_state

        # TODO: validations

        if not request.custom_context.get(REPEATED_INVOCATION):
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            request.custom_context[REPEATED_INVOCATION] = True
            return ProgressEvent(
                status=OperationStatus.IN_PROGRESS,
                resource_model=model,
                custom_context=request.custom_context,
            )

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def read(
        self,
        request: ResourceRequest[LambdaFunctionProperties],
    ) -> ProgressEvent[LambdaFunctionProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - lambda:GetFunction
          - lambda:GetFunctionCodeSigningConfig
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[LambdaFunctionProperties],
    ) -> ProgressEvent[LambdaFunctionProperties]:
        """
        Delete a resource

        IAM permissions required:
          - lambda:DeleteFunction
          - ec2:DescribeNetworkInterfaces
        """
        raise NotImplementedError

    def update(
        self,
        request: ResourceRequest[LambdaFunctionProperties],
    ) -> ProgressEvent[LambdaFunctionProperties]:
        """
        Update a resource

        IAM permissions required:
          - lambda:DeleteFunctionConcurrency
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
          - lambda:UpdateFunctionConfiguration
          - lambda:UpdateFunctionCode
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:GenerateDataKey
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:PutFunctionCodeSigningConfig
          - lambda:DeleteFunctionCodeSigningConfig
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetPolicy
          - lambda:AddPermission
          - lambda:RemovePermission
          - lambda:GetResourcePolicy
          - lambda:PutResourcePolicy
          - lambda:DeleteResourcePolicy
        """
        raise NotImplementedError
